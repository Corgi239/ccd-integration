// Code generated by stanc v2.32.0
#include <stan/model/model_header.hpp>
namespace gpcovf_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 75> locations_array__ =
  {" (found before start of program)",
  " (in 'test_models/other/gpcovf.stan', line 56, column 2 to column 30)",
  " (in 'test_models/other/gpcovf.stan', line 57, column 2 to column 24)",
  " (in 'test_models/other/gpcovf.stan', line 58, column 2 to column 23)",
  " (in 'test_models/other/gpcovf.stan', line 74, column 2 to column 92)",
  " (in 'test_models/other/gpcovf.stan', line 75, column 2 to column 26)",
  " (in 'test_models/other/gpcovf.stan', line 62, column 9 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 62, column 12 to column 13)",
  " (in 'test_models/other/gpcovf.stan', line 62, column 2 to line 63, column 39)",
  " (in 'test_models/other/gpcovf.stan', line 64, column 9 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 64, column 12 to column 13)",
  " (in 'test_models/other/gpcovf.stan', line 64, column 2 to column 65)",
  " (in 'test_models/other/gpcovf.stan', line 66, column 2 to column 31)",
  " (in 'test_models/other/gpcovf.stan', line 67, column 2 to column 25)",
  " (in 'test_models/other/gpcovf.stan', line 68, column 2 to column 24)",
  " (in 'test_models/other/gpcovf.stan', line 70, column 2 to column 41)",
  " (in 'test_models/other/gpcovf.stan', line 37, column 2 to column 17)",
  " (in 'test_models/other/gpcovf.stan', line 38, column 9 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 38, column 2 to column 14)",
  " (in 'test_models/other/gpcovf.stan', line 39, column 9 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 39, column 2 to column 14)",
  " (in 'test_models/other/gpcovf.stan', line 40, column 2 to column 18)",
  " (in 'test_models/other/gpcovf.stan', line 41, column 9 to column 11)",
  " (in 'test_models/other/gpcovf.stan', line 41, column 2 to column 16)",
  " (in 'test_models/other/gpcovf.stan', line 45, column 2 to column 23)",
  " (in 'test_models/other/gpcovf.stan', line 46, column 2 to column 23)",
  " (in 'test_models/other/gpcovf.stan', line 47, column 2 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 48, column 2 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 49, column 8 to column 9)",
  " (in 'test_models/other/gpcovf.stan', line 49, column 2 to column 50)",
  " (in 'test_models/other/gpcovf.stan', line 50, column 8 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 50, column 2 to column 53)",
  " (in 'test_models/other/gpcovf.stan', line 51, column 9 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 51, column 2 to column 33)",
  " (in 'test_models/other/gpcovf.stan', line 52, column 2 to column 27)",
  " (in 'test_models/other/gpcovf.stan', line 53, column 9 to column 10)",
  " (in 'test_models/other/gpcovf.stan', line 53, column 2 to column 37)",
  " (in 'test_models/other/gpcovf.stan', line 74, column 9 to column 11)",
  " (in 'test_models/other/gpcovf.stan', line 9, column 4 to column 22)",
  " (in 'test_models/other/gpcovf.stan', line 10, column 4 to column 22)",
  " (in 'test_models/other/gpcovf.stan', line 11, column 11 to column 13)",
  " (in 'test_models/other/gpcovf.stan', line 11, column 4 to column 18)",
  " (in 'test_models/other/gpcovf.stan', line 13, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 13, column 17 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 13, column 6 to column 25)",
  " (in 'test_models/other/gpcovf.stan', line 14, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 14, column 6 to column 26)",
  " (in 'test_models/other/gpcovf.stan', line 15, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 15, column 17 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 15, column 6 to column 29)",
  " (in 'test_models/other/gpcovf.stan', line 16, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 16, column 17 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 16, column 6 to column 28)",
  " (in 'test_models/other/gpcovf.stan', line 17, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 17, column 6 to column 23)",
  " (in 'test_models/other/gpcovf.stan', line 18, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 18, column 17 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 18, column 6 to column 28)",
  " (in 'test_models/other/gpcovf.stan', line 19, column 13 to column 15)",
  " (in 'test_models/other/gpcovf.stan', line 19, column 17 to column 19)",
  " (in 'test_models/other/gpcovf.stan', line 19, column 6 to column 23)",
  " (in 'test_models/other/gpcovf.stan', line 20, column 6 to column 54)",
  " (in 'test_models/other/gpcovf.stan', line 22, column 8 to column 41)",
  " (in 'test_models/other/gpcovf.stan', line 21, column 6 to line 22, column 41)",
  " (in 'test_models/other/gpcovf.stan', line 23, column 6 to column 34)",
  " (in 'test_models/other/gpcovf.stan', line 24, column 6 to column 47)",
  " (in 'test_models/other/gpcovf.stan', line 25, column 6 to column 56)",
  " (in 'test_models/other/gpcovf.stan', line 26, column 6 to column 64)",
  " (in 'test_models/other/gpcovf.stan', line 27, column 6 to column 36)",
  " (in 'test_models/other/gpcovf.stan', line 28, column 6 to column 50)",
  " (in 'test_models/other/gpcovf.stan', line 29, column 6 to column 78)",
  " (in 'test_models/other/gpcovf.stan', line 31, column 6 to column 77)",
  " (in 'test_models/other/gpcovf.stan', line 12, column 4 to line 32, column 5)",
  " (in 'test_models/other/gpcovf.stan', line 33, column 4 to column 14)",
  " (in 'test_models/other/gpcovf.stan', line 8, column 34 to line 34, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
gp_pred_rng(const std::vector<T0__>& x2, const T1__& y1_arg__,
            const std::vector<T2__>& x1, const T3__& sigma_f, const T4__&
            lengthscale_f, const T5__& sigma, const T6__& jitter, RNG&
            base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
gp_pred_rng(const std::vector<T0__>& x2, const T1__& y1_arg__,
            const std::vector<T2__>& x1, const T3__& sigma_f, const T4__&
            lengthscale_f, const T5__& sigma, const T6__& jitter, RNG&
            base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__>>;
  int current_statement__ = 0;
  const auto& y1 = stan::math::to_ref(y1_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N1 = std::numeric_limits<int>::min();
    current_statement__ = 38;
    N1 = stan::math::rows(y1);
    int N2 = std::numeric_limits<int>::min();
    current_statement__ = 39;
    N2 = stan::math::size(x2);
    current_statement__ = 40;
    stan::math::validate_non_negative_index("f2", "N2", N2);
    Eigen::Matrix<local_scalar_t__,-1,1> f2 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N2, DUMMY_VAR__);
    {
      current_statement__ = 42;
      stan::math::validate_non_negative_index("L_K", "N1", N1);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("L_K", "N1", N1);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_K =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N1, N1, DUMMY_VAR__);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("K_div_y1", "N1", N1);
      Eigen::Matrix<local_scalar_t__,-1,1> K_div_y1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N1, DUMMY_VAR__);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("k_x1_x2", "N1", N1);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("k_x1_x2", "N2", N2);
      Eigen::Matrix<local_scalar_t__,-1,-1> k_x1_x2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N1, N2, DUMMY_VAR__);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("v_pred", "N1", N1);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("v_pred", "N2", N2);
      Eigen::Matrix<local_scalar_t__,-1,-1> v_pred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N1, N2, DUMMY_VAR__);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("f2_mu", "N2", N2);
      Eigen::Matrix<local_scalar_t__,-1,1> f2_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N2, DUMMY_VAR__);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("cov_f2", "N2", N2);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("cov_f2", "N2", N2);
      Eigen::Matrix<local_scalar_t__,-1,-1> cov_f2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N2, N2, DUMMY_VAR__);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("K", "N1", N1);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("K", "N1", N1);
      Eigen::Matrix<local_scalar_t__,-1,-1> K =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N1, N1, DUMMY_VAR__);
      current_statement__ = 61;
      stan::model::assign(K,
        stan::math::gp_exp_quad_cov(x1, sigma_f, lengthscale_f),
        "assigning variable K");
      current_statement__ = 63;
      for (int n = 1; n <= N1; ++n) {
        current_statement__ = 62;
        stan::model::assign(K,
          (stan::model::rvalue(K, "K", stan::model::index_uni(n),
             stan::model::index_uni(n)) + stan::math::square(sigma)),
          "assigning variable K", stan::model::index_uni(n),
          stan::model::index_uni(n));
      }
      current_statement__ = 64;
      stan::model::assign(L_K, stan::math::cholesky_decompose(K),
        "assigning variable L_K");
      current_statement__ = 65;
      stan::model::assign(K_div_y1,
        stan::math::mdivide_left_tri_low(L_K, y1),
        "assigning variable K_div_y1");
      current_statement__ = 66;
      stan::model::assign(K_div_y1,
        stan::math::transpose(
          stan::math::mdivide_right_tri_low(
            stan::math::transpose(stan::model::deep_copy(K_div_y1)), L_K)),
        "assigning variable K_div_y1");
      current_statement__ = 67;
      stan::model::assign(k_x1_x2,
        stan::math::gp_exp_quad_cov(x1, x2, sigma_f, lengthscale_f),
        "assigning variable k_x1_x2");
      current_statement__ = 68;
      stan::model::assign(f2_mu,
        stan::math::multiply(stan::math::transpose(k_x1_x2), K_div_y1),
        "assigning variable f2_mu");
      current_statement__ = 69;
      stan::model::assign(v_pred,
        stan::math::mdivide_left_tri_low(L_K, k_x1_x2),
        "assigning variable v_pred");
      current_statement__ = 70;
      stan::model::assign(cov_f2,
        stan::math::subtract(
          stan::math::gp_exp_quad_cov(x2, sigma_f, lengthscale_f),
          stan::math::multiply(stan::math::transpose(v_pred), v_pred)),
        "assigning variable cov_f2");
      current_statement__ = 71;
      stan::model::assign(f2,
        stan::math::multi_normal_rng(f2_mu,
          stan::math::add_diag(cov_f2, stan::math::rep_vector(jitter, N2)),
          base_rng__), "assigning variable f2");
    }
    current_statement__ = 73;
    return f2;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class gpcovf_model final : public model_base_crtp<gpcovf_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> x_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  int N2;
  Eigen::Matrix<double,-1,1> x2_data__;
  double xmean;
  double ymean;
  double xsd;
  double ysd;
  std::vector<double> xn;
  std::vector<double> x2n;
  Eigen::Matrix<double,-1,1> yn_data__;
  double sigma_intercept;
  Eigen::Matrix<double,-1,1> zeros_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yn{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> zeros{nullptr, 0};
 public:
  ~gpcovf_model() {}
  gpcovf_model(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "gpcovf_model_namespace::gpcovf_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 18;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 20;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      context__.validate_dims("data initialization", "N2", "int",
        std::vector<size_t>{});
      N2 = std::numeric_limits<int>::min();
      current_statement__ = 21;
      N2 = context__.vals_i("N2")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "N2", N2, 1);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("x2", "N2", N2);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "x2", "double",
        std::vector<size_t>{static_cast<size_t>(N2)});
      x2_data__ = Eigen::Matrix<double,-1,1>::Constant(N2,
                    std::numeric_limits<double>::quiet_NaN());
      new (&x2) Eigen::Map<Eigen::Matrix<double,-1,1>>(x2_data__.data(), N2);
      {
        std::vector<local_scalar_t__> x2_flat__;
        current_statement__ = 23;
        x2_flat__ = context__.vals_r("x2");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(x2, x2_flat__[(pos__ - 1)],
            "assigning variable x2", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      xmean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 24;
      xmean = stan::math::mean(x);
      current_statement__ = 25;
      ymean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      ymean = stan::math::mean(y);
      current_statement__ = 26;
      xsd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 26;
      xsd = stan::math::sd(x);
      current_statement__ = 27;
      ysd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 27;
      ysd = stan::math::sd(y);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("xn", "N", N);
      current_statement__ = 29;
      xn = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 29;
      stan::model::assign(xn,
        stan::math::to_array_1d(
          stan::math::divide(stan::math::subtract(x, xmean), xsd)),
        "assigning variable xn");
      current_statement__ = 30;
      stan::math::validate_non_negative_index("x2n", "N2", N2);
      current_statement__ = 31;
      x2n = std::vector<double>(N2, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 31;
      stan::model::assign(x2n,
        stan::math::to_array_1d(
          stan::math::divide(stan::math::subtract(x2, xmean), xsd)),
        "assigning variable x2n");
      current_statement__ = 32;
      stan::math::validate_non_negative_index("yn", "N", N);
      current_statement__ = 33;
      yn_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&yn) Eigen::Map<Eigen::Matrix<double,-1,1>>(yn_data__.data(), N);
      current_statement__ = 33;
      stan::model::assign(yn,
        stan::math::divide(stan::math::subtract(y, ymean), ysd),
        "assigning variable yn");
      current_statement__ = 34;
      sigma_intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 34;
      sigma_intercept = 1;
      current_statement__ = 35;
      stan::math::validate_non_negative_index("zeros", "N", N);
      current_statement__ = 36;
      zeros_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&zeros)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(zeros_data__.data(), N);
      current_statement__ = 36;
      stan::model::assign(zeros, stan::math::rep_vector(0, N),
        "assigning variable zeros");
      current_statement__ = 37;
      stan::math::validate_non_negative_index("f", "N2", N2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "gpcovf_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.0",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "gpcovf_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ lengthscale_f = DUMMY_VAR__;
      current_statement__ = 1;
      lengthscale_f = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      local_scalar_t__ sigma_f = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_f = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ sigman = DUMMY_VAR__;
      current_statement__ = 3;
      sigman = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      {
        current_statement__ = 6;
        stan::math::validate_non_negative_index("K_f", "N", N);
        current_statement__ = 7;
        stan::math::validate_non_negative_index("K_f", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> K_f =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 8;
        stan::model::assign(K_f,
          stan::math::add(
            stan::math::gp_exp_quad_cov(xn, sigma_f, lengthscale_f),
            stan::math::pow(sigma_intercept, 2)), "assigning variable K_f");
        current_statement__ = 9;
        stan::math::validate_non_negative_index("L_f", "N", N);
        current_statement__ = 10;
        stan::math::validate_non_negative_index("L_f", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_f =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
        current_statement__ = 11;
        stan::model::assign(L_f,
          stan::math::cholesky_decompose(
            stan::math::add_diag(K_f, stan::math::pow(sigman, 2))),
          "assigning variable L_f");
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lengthscale_f, 0, 1));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_f, 0, 1));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigman, 0, 1));
        current_statement__ = 15;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(yn,
                         zeros, L_f));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "gpcovf_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double lengthscale_f = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      lengthscale_f = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      double sigma_f = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_f = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double sigman = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigman = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      out__.write(lengthscale_f);
      out__.write(sigma_f);
      out__.write(sigman);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> f =
        Eigen::Matrix<double,-1,1>::Constant(N2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      stan::model::assign(f,
        stan::math::add(
          stan::math::multiply(
            gp_pred_rng(x2n, yn, xn, sigma_f, lengthscale_f, sigman, 1e-9,
              base_rng__, pstream__), ysd), ymean), "assigning variable f");
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma = (sigman * ysd);
      out__.write(f);
      out__.write(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ lengthscale_f = DUMMY_VAR__;
      lengthscale_f = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lengthscale_f);
      local_scalar_t__ sigma_f = DUMMY_VAR__;
      sigma_f = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_f);
      local_scalar_t__ sigman = DUMMY_VAR__;
      sigman = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigman);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ lengthscale_f = DUMMY_VAR__;
      lengthscale_f = context__.vals_r("lengthscale_f")[(1 - 1)];
      out__.write_free_lb(0, lengthscale_f);
      local_scalar_t__ sigma_f = DUMMY_VAR__;
      sigma_f = context__.vals_r("sigma_f")[(1 - 1)];
      out__.write_free_lb(0, sigma_f);
      local_scalar_t__ sigman = DUMMY_VAR__;
      sigman = context__.vals_r("sigman")[(1 - 1)];
      out__.write_free_lb(0, sigman);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"lengthscale_f", "sigma_f", "sigman"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"f", "sigma"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N2)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "lengthscale_f");
    param_names__.emplace_back(std::string() + "sigma_f");
    param_names__.emplace_back(std::string() + "sigman");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
        param_names__.emplace_back(std::string() + "f" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "lengthscale_f");
    param_names__.emplace_back(std::string() + "sigma_f");
    param_names__.emplace_back(std::string() + "sigman");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N2; ++sym1__) {
        param_names__.emplace_back(std::string() + "f" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"lengthscale_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigman\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N2) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"lengthscale_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigman\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N2) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((N2 + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((N2 + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = gpcovf_model_namespace::gpcovf_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return gpcovf_model_namespace::profiles__;
}
#endif